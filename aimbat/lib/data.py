from aimbat.lib.models import (
    AimbatFile,
    AimbatFileCreate,
    AimbatStation,
    AimbatEvent,
    AimbatSeismogram,
)
from aimbat.lib.db import engine
from aimbat.lib.common import AIMBAT_FILE_TYPES, AimbatFileType
from aimbat.lib.io import read_metadata_from_file
from pathlib import Path
from sqlmodel import Session, select
from sqlalchemy.exc import NoResultFound
import click


def add_files(data_files: list[Path], filetype: AimbatFileType) -> None:
    """Add files to the AIMBAT database.

    Parameters:
        data_files: List of filepaths of the data files.
        filetype: Type of data file (e.g. sac).
        engine: Database engine.
    """
    with Session(engine) as session:

        for filename in data_files:
            aimbatfilecreate = AimbatFileCreate(
                filename=str(filename), filetype=filetype
            )
            aimbatfile = AimbatFile.model_validate(aimbatfilecreate)
            statement = select(AimbatFile).where(
                AimbatFile.filename == aimbatfile.filename
            )
            results = session.exec(statement)
            if results.first() is None:
                session.add(aimbatfile)

        session.commit()
    update_metadata()


def update_metadata() -> None:
    """Update or add metadata by reading all files whose paths are stored
    in the AIMBAT project.

    Parameters:
        engine: Database engine.
    """

    with Session(engine) as session:
        select_all_aimbatfiles = select(AimbatFile)
        for aimbatfile in session.exec(select_all_aimbatfiles).all():
            seismogram, station, event, t0 = read_metadata_from_file(
                aimbatfile.filename, aimbatfile.filetype
            )

            # add or update station data - as an AimbatStation contains
            # exactly the same fields as a pysmo Station type (except for
            # the autogenerated id) we can create a new AimbatStation object
            # by running model_validate on any station object that is also
            # an instance of the pysmo Station protocol class.
            aimbatstation_new = AimbatStation.model_validate(station)
            select_aimbatstation = select(AimbatStation).where(
                AimbatStation.name == aimbatstation_new.name
                and AimbatStation.network == aimbatstation_new.network
            )
            try:
                aimbatstation = session.exec(select_aimbatstation).one()
                aimbatstation.latitude = aimbatstation_new.latitude
                aimbatstation.longitude = aimbatstation_new.longitude
                aimbatstation.elevation = aimbatstation_new.elevation
                session.add(aimbatstation)
            except NoResultFound:
                session.add(aimbatstation_new)

            # add or update event data - just like for the station we can
            # directly create an AimbatEvent from any event type.
            aimbatevent_new = AimbatEvent.model_validate(event)
            select_aimbatevent = select(AimbatEvent).where(
                AimbatEvent.time == aimbatevent_new.time
            )
            try:
                aimbatevent = session.exec(select_aimbatevent).one()
                aimbatevent.latitude = aimbatevent_new.latitude
                aimbatevent.longitude = aimbatevent_new.longitude
                aimbatevent.depth = aimbatevent_new.depth
                aimbatevent.time = aimbatevent_new.time
                session.add(aimbatevent)
            except NoResultFound:
                session.add(aimbatevent_new)

            # we need to commit to get the IDs of the station and event instances
            session.commit()
            aimbatstation = session.exec(select_aimbatstation).one()
            aimbatevent = session.exec(select_aimbatevent).one()

            # AimbatSeismogram has more attributes than a pysmo Seismogram,
            # so it needs to be constructed manually
            assert aimbatfile.id is not None
            assert aimbatstation.id is not None
            assert aimbatevent.id is not None
            aimbatseismogram_new = AimbatSeismogram(
                file_id=aimbatfile.id,
                station_id=aimbatstation.id,
                event_id=aimbatevent.id,
                begin_time=seismogram.begin_time,
                delta=seismogram.delta,
                t0=t0,
            )
            select_aimbatseismogram = select(AimbatSeismogram).where(
                AimbatSeismogram.file_id == aimbatfile.id
            )
            try:
                aimbatseismogram = session.exec(select_aimbatseismogram).one()
                aimbatseismogram.begin_time = aimbatseismogram_new.begin_time
                aimbatseismogram.delta = aimbatseismogram_new.delta
                aimbatseismogram.t0 = aimbatseismogram_new.t0
                aimbatseismogram_new.cached_length = None
                session.add(aimbatseismogram)
            except NoResultFound:
                session.add(aimbatseismogram_new)

        session.commit()


@click.group("data")
def cli() -> None:
    """Manage data (Seismogram files) in an AIMBAT project."""
    pass


@cli.command("add")
@click.option(
    "--filetype",
    type=click.Choice(AIMBAT_FILE_TYPES, case_sensitive=False),
    default="sac",
    help="File type.",
)
@click.argument("data_files", nargs=-1, type=click.Path(exists=True), required=True)
def cli_data_add(data_files: list[Path], filetype: AimbatFileType) -> None:
    """Add or update data files in the AIMBAT project."""
    add_files(data_files, filetype)


if __name__ == "__main__":
    cli()
